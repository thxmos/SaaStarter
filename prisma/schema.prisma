generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?

  password   String?
  avatar     String?
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  session       Session[]
  oAuthProvider OAuthProvider?

  Project Project[]
}

enum OAuthProvider {
  GOOGLE
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
}

model Project {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    ProjectStatus @default(DRAFT)
  images    String[]

  userId    String
  user      User     @relation(fields: [userId], references: [id])

  Songs Song[]
  Tasks Task[]

}
enum ProjectStatus {
  DRAFT
  COMPLETED
}

model Song {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String?
  tempo     Int?

  notes     String?
  lyrics    String?
  status    SongStatus @default(DEMO)

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

}

enum SongStatus {
  DEMO
  COMPLETED
}

model Task {
  id        String   @id @default(cuid())
  type      TaskType
  name      String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id])
}

enum TaskType {
  MARKETING
  PROJECT
  SONG
}
